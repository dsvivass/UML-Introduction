HERENCIA

herencia es un mecanismo de reutilización fundamental en los sistemas orientados a objetos. 

Entonces, ¿qué son? Las relaciones de herencia también conocidas como de especialización, 
son un mecanismo por el cual una clase incorpora la estructura y comportamiento de otra 
clase más general a ello. A esta clase más general la llamaremos la superclase. 

Mientras que la clase que incorpora la estructura y comportamiento de la superclase, la 
llamaremos la subclase.

En UML, para representar que una clase hereda de otra usamos una linea cuya terminación es 
un triángulo vacío. 

La punta del triángulo está en el lado de la superclase y debe apuntar a esta, justamente, 
pongamos un ejemplo. 

Creemos una clase llamada computadorescritorio, bien, esta clase representa el clásico 
computador con su torre, sus pantallas, sus teclados, etcétera, pero podríamos querer 
aumentar el nivel de detalles de los computadores que queremos modelar, así que crearemos 
dos clases que van a especializarse, laptop para modelar los computadores portátiles y 
computador de teatro en casa, para modelar los computadores especializados en hacer las 
veces de teatros en casa.

				 ---------------------- 
				| ComputadorEscritorio |
				 ----------------------  
				|                      |
				 ----------------------
				|                      |
				 ---------------------- 
					    /\
					   /__\
	   _________________________________|______________________________
	   |								  |
 ---------------------                                         ------------------------
|       Laptop        | 				      | ComputadorTeatroEnCasa |
 ---------------------                                         ------------------------
|                     | 				      |                        |
 ---------------------  				       ------------------------
|                     |                                       |                        |
 ---------------------                                         ------------------------


Ahora notemos que estamos haciendo una clasificación donde tenemos los computadores de 
escritorio y decimos que algunos de estos también son laptops y otros son computadores 
para teatro en casa.

Entonces, cuando creamos la relación de herencia entre el computador y nuestras nuevas 
clases, podemos decir lo siguiente. 

Computador de escritorio, es una GENERALIZACIÓN del laptop y computador de teatro en casa. 


	ComputadorEscritorio       Generaliza      Laptop y ComputadorTeatroEnCasa


Computador de escritorio es la superclase para laptop y computador de teatro en casa o 
podemos decir laptop y computador de teatro en casa son especializaciones de computador 
de escritorio. 


	ComputadorEscritorio     Es la superclase de     Laptop y ComputadorTeatroEnCasa


O laptop y computador de teatro en casa heredan de la clase computador de escritorio. 

O finalmente laptop y computador de teatro en casa son subclases de computador de escritorio.

En nuestro ejemplo, podemos pensar que la superclase computador tiene atributos como la marca 
o la capacidad de disco o la memoria ram y que además cuenta con los métodos dar marca y 
calcular precio base.


				 -------------------------------- 
				| ComputadorEscritorio           |
				 -------------------------------- 
				| -marca: String                 |
				| -capacidadDisco: int           |
				| -memoriaRam: int               |
				 --------------------------------
				| + darMarca(): String           |
				| + calcularPrecioBase(): Double |
				 -------------------------------- 
					    /\
					   /__\
	   _________________________________|______________________________
	   |								  |
 ---------------------                                         ------------------------
|       Laptop        | 				      | ComputadorTeatroEnCasa |
 ---------------------                                         ------------------------
|                     | 				      |                        |
 ---------------------  				       ------------------------
|                     |                                       |                        |
 ---------------------                                         ------------------------


Este último método retorna el precio base de ensamblaje de un computador con dichas 
características.

Estos son los atributos y métodos que todas las subclases tienen y heredan. Como 
consecuencia un objeto a instancia de cualquiera de las subclases, tendrá los atributos 
y los métodos de la superclase, además de los propios. Decimos entonces que hereda.

También podemos añadir nuevos atributos y métodos. 

En el caso de la clase laptop por ejemplo añadiremos un atributo llamado duración batería, 
para modelar el tiempo de carga que tiene la batería y un método para saber dicho valor. 

Y para la clase de computador de teatro en casa modelaremos el número de parlantes que 
incluiremos y un método para reproducir una película con toda la capacidad a nuestra 
disposición. 


				 -------------------------------- 
				| ComputadorEscritorio           |
				 -------------------------------- 
				| -marca: String                 |
				| -capacidadDisco: int           |
				| -memoriaRam: int               |
				 --------------------------------
				| + darMarca(): String           |
				| + calcularPrecioBase(): Double |
				 -------------------------------- 
					    /\
					   /__\
	   _________________________________|______________________________
	   |								  |
 ----------------------------------                            ------------------------
|       Laptop                     | 	                      | ComputadorTeatroEnCasa |
 ----------------------------------                            ------------------------
| -duracionBateria: Double         | 			      | - numeroParlantes: int |
 ----------------------------------  			       ------------------------
| + darDuracionBateria(): Double   |                          | + reproducirPelicula() |
 ----------------------------------                            ------------------------

Ambos son métodos propios de las subclases. Y decimos entonces que especializan a la 
superclase agregando más información. 

Las subclases heredan por ejemplo, el método de calcular precio base. 

Pero puede pasar que la forma de calcularlo dependa del computador específico por ejemplo, 
en el caso de un laptop podemos pensar que los impuestos se deben calcular de manera diferente. 

Así que para reflejar esto redefinimos el método calcular precio base en la subclase.


				 -------------------------------- 
				| ComputadorEscritorio           |
				 -------------------------------- 
				| -marca: String                 |
				| -capacidadDisco: int           |
				| -memoriaRam: int               |
				 --------------------------------
				| + darMarca(): String           |
				| + calcularPrecioBase(): Double |
				 -------------------------------- 
					    /\
					   /__\
	   _________________________________|______________________________
	   |								  |
 ----------------------------------                            --------------------------------
|       Laptop                     | 	                      | ComputadorTeatroEnCasa         |
 ----------------------------------                            --------------------------------
| -duracionBateria: Double         | 			      | - numeroParlantes: int         |
 ----------------------------------  			       --------------------------------
| + darDuracionBateria(): Double   |                          | + reproducirPelicula()         |
| + calcularPrecioBase(): Double   |                          | + calcularPrecioBase(): Double |
 ----------------------------------                            --------------------------------
 
Entonces en resumen, en las relaciones de herencia tenemos que, primero las subclases heredan 
o tienen los atributos, asociaciones y o métodos de la superclase, es decir las instancias de 
las subclases tienen además de los propios, las propiedades de la superclase. 

Segundo, las subclases pueden tener nuevos atributos, asociaciones y o métodos es decir, la 
subclase al agregar propiedades, especializa a la superclase. 

Tercero, las subclases pueden redefinir o implementar en la subclase métodos o atributos de 
la superclase. 

Es decir al cambiar el comportamiento, especializan a la superclase. 

Y ahora veamos utilizando notación básica de conjuntos, una manera alternativa de entender 
la relaciones de herencia. 

Esta notación no hace parte de UML pero nos va a ayudar a comprender el concepto que estamos 
viendo. 

Imaginemos entonces cinco objetos diferentes. 

Dos de esos objetos serán instancia de la clase laptop, laptop 1, laptop 2, L1, L2. 

Dos de la clase computador de teatro en casa CTC1 y CTC2 y desde aquí será un computador 
de escritorio CE. 


		ComputadoresEscritorio
	|-------------------------------|
	|		CE		|
	|  Laptops	     CTCS       |
	|  |-----|	    |------|	|
	|  | L1	 |	    | CTC1 |	|
	|  | L2	 |	    | CTC2 |    |
	|  |_____|	    |______|    |
	|_______________________________|


Según la relación de herencia, todos estos objetos pertenecen al conjunto de la superclase 
de computadores de escritorio. 

Pero las instancias de las subclases que definimos, son especializaciones.

Luego van a ser parte cada una de un subconjunto que está contenido dentro de nuestro 
conjunto de la superclase. Entonces las laptops está en su propio subconjunto

y los computadores de teatro en casa, están en otro subconjunto, todos esto es un conjuntos 
contenidos dentro del conjunto de la superclase de computadores de escritorio.


#######################################################################################


CLASES ABSTRACTAS

El propósito principal de una clase abstracta es ayudar a organizar una jerarquía de conceptos. 

Por ejemplo, los animales se pueden clasificar en vertebrados o invertebrados, o podríamos 
clasificar vehículos en automóviles, aviones y barcos, o figuras en elipses, rectángulos y 
triángulos. 

				 ---------------------- 
				|        𝘍𝘪𝘨𝘶𝘳𝘢          |
				 ----------------------  
				|                      |
				 ----------------------
				|                      |
				 ---------------------- 
					    /\
					   /__\
	   _________________________________|______________________________
	   |								  |
 ---------------------           ---------------------          ------------------------
|       Elipse        | 	|      Triangulo      |	       |       Rectangulo       |
 ---------------------           ---------------------          ------------------------
|                     | 	|                     |	       |                        |
 ---------------------  	 ---------------------          ------------------------
|                     |         |                     |        |                        |
 ---------------------           ---------------------          ------------------------

En cada ejemplo podemos tener una instancia de las subclases pero no de la superclase, así 
decimos que la superclase es abstracta, ya que no podemos crear objetos de esta misma. 

Las superclases tienen entonces un nivel de abstracción mayor. 

Allí podemos definir atributos y métodos que serán heredados por todas las subclases. 

También podemos declarar métodos, pero debemos indicar que quienes deben definir su 
implementación son las subclases. 

Estos son los métodos que llamamos métodos abstractos, que explicaremos con más detalle en 
un momento.

Cuando implementamos en UML una clase abstracta, su nombre se escribe en itálica, respetando 
las demás convenciones de nombramiento que hemos visto hasta ahora.

Tomemos ahora el ejemplo de la superclase Figura, de la cual tres otras clases la 
especializan, elipse, rectángulo y triángulo. Notemos que figura está en itálica y que 
usamos la notación de la flecha de triángulo vacío para indicar cuáles son sus subclases. 

Ahora, vamos a definir los atributos con base en nuestra clase abstracta, alto y ancho. 

También unos métodos de base con una implementación sencilla, darAncho y darAlto, que 
retornan los atributos del mismo nombre. 

				 ---------------------- 
				|        𝘍𝘪𝘨𝘶𝘳𝘢          |
				 ----------------------  
				| # alto: double       |
				| # ancho: double      |
				 ----------------------
				| + darAlto(): double  |
				| + darAncho(): double |
				 ---------------------- 
					    /\
					   /__\
	   _________________________________|______________________________
	   |								  |
 ---------------------           ---------------------          ------------------------
|       Elipse        | 	|      Triangulo      |	       |       Rectangulo       |
 ---------------------           ---------------------          ------------------------
|                     | 	|                     |	       |                        |
 ---------------------  	 ---------------------          ------------------------
|                     |         |                     |        |                        |
 ---------------------           ---------------------          ------------------------

Todas las subclases que hereden de Figura no tendrán que implementar estos métodos, ya 
que existen.

Como figura es una clase abstracta, algunos de sus métodos no tendrán implementación y es 
probable que necesiten usar los atributos que definimos. 

¿Cómo podemos entonces declarar la visibilidad de los atributos sin comprometer el 
encapsulamiento? Recuerda que si los declaramos como públicos, todos podrán accederlos; 

y si son privados, sus subclases no tendrían acceso a ellos. En UML existe un tercer tipo 
de visibilidad, protegida. 

Los atributos protegidos son visibles para las clases que especializan a una superclase y 
nada más. Con eso hemos resuelto nuestro problema.

Ahora, como podemos ver, los atributos protegidos no se indican con un símbolo de menos 
o con un símbolo de más, sino con un numeral.

Hablemos ahora de métodos abstractos. Como mencionamos anteriormente, las clases abstractas 
pueden determinar que sus subclases deben declarar e implementar ciertos métodos de los 
que ellas solo proveen el nombre, el tipo y los parámetros. 

Esto es lo que llamamos un método abstracto, un método que todas las subclases deben 
implementar. 

En nuestro ejemplo, supongamos dos métodos abstractos, darÁrea y darPerímetro, ambos 
métodos van a variar de acuerdo con la figura. 

				 ---------------------- 
				|        𝘍𝘪𝘨𝘶𝘳𝘢          |
				 ----------------------  
				| # alto: double       |
				| # ancho: double      |
				 ----------------------
				| + darAlto(): double  |
				| + darAncho(): double |
				| + 𝘥𝘢𝘳𝘗𝘦𝘳𝘪𝘮𝘦𝘵𝘳𝘰(): 𝘥𝘰𝘶𝘣𝘭𝘦  |
				| + 𝘥𝘢𝘳𝘈𝘳𝘦𝘢(): 𝘥𝘰𝘶𝘣𝘭𝘦     |
				 ---------------------- 
					    /\
					   /__\
	   _________________________________|______________________________
	   |								  |
 ---------------------           ---------------------          ------------------------
|       Elipse        | 	|      Triangulo      |	       |       Rectangulo       |
 ---------------------           ---------------------          ------------------------
|                     | 	|                     |	       |                        |
 ---------------------  	 ---------------------          ------------------------
|                     |         |                     |        |                        |
 ---------------------           ---------------------          ------------------------

No es igual calcular ambas medidas en un elipse que en un rectángulo o en un triángulo. 

Luego, tiene sentido que cada subclase provea su propia implementación. 

En UML, los métodos abstractos se representan con su nombre en itálica, su visibilidad 
será pública o protegida, el tipo de retorno debe ser consistente, por supuesto.

Ahora, existe un caso algo particular de las clases abstractas del que debemos hablar, 
las interfaces. 

Las interfaces son clases que no proveen implementación de ninguno de sus métodos. 

Esto es, todos sus métodos son abstractos. 

Adicionalmente, sus atributos no son protegidos, sino públicos. Y mientras las clases 
abstractas nos permiten especializar y clasificar los elementos de nuestro modelo, 
las interfaces están más orientadas a proveer un contrato funcional con el que todas las 
clases que la implementan, sí, que la implementan, no que la especializan, deben comprometerse.

Revisemos entonces por un momento ahora la notación de conjuntos para representar clases 
abstractas.

De nuevo entonces tengamos ahora cinco objetos. 

Este va a ser una instancia de la clase triángulo, dos de la clase rectángulo y dos de la 
clase elipse. 

¿Qué es lo que sucede? Como vamos a manejar clases abstractas, no podemos crear instancias 
de la clase figura porque no están completas. 

Sin embargo, siguen definiendo un conjunto de la superclase donde van a estar todas las 
subclases.

Entonces, la diferencia entre los subconjuntos y el conjunto de la figura tiene que estar 
vacía, no puede haber espacio para crear instancias de la clase figura. 

En otras palabras, este espacio tiene que estar dividido exactamente en tres porciones 
para representar que solo de la clase figura, solo pueden existir instancias de la clase 
triángulo, de la clase rectángulo o de la clase elipse. 

Esta es la diferencia de cuando representamos clases abstractas utilizando el mecanismo 
de herencia. 

En este caso, a diferencia de la herencia tradicional, no podemos crear instancias de la 
superclase y solo instancias de las subclases.


		                  Figuras
	            |-------------------------------|
	            |		    T1		    | Triangulos
	            |                               |
	            |-------------------------------|
	Rectangulos |               |	            |
	            |      R1       |	   E1       | Elipses
	            |      R2       |      E2       |
	            |_______________|_______________|


#########################################################################################

POLIMORFISMO

una de las consecuencias más interesantes de las relaciones de herencia cuando vamos a 
programar en un lenguaje orientado a objetos.

Para ilustrarlo mejor, pensemos en nuestro ejemplo y agreguemos dos clases adicionales, 
una clase círculo, que hereda de elipse, y una cuadrado, que hereda de rectángulo. 

				 ---------------------- 
				|        𝘍𝘪𝘨𝘶𝘳𝘢          |
                                 ----------------------  
				| # alto: double       |
				| # ancho: double      |
				 ----------------------
				| + darAlto(): double  |
				| + darAncho(): double |
				| + 𝘥𝘢𝘳𝘗𝘦𝘳𝘪𝘮𝘦𝘵𝘳𝘰(): 𝘥𝘰𝘶𝘣𝘭𝘦  |
				| + 𝘥𝘢𝘳𝘈𝘳𝘦𝘢(): 𝘥𝘰𝘶𝘣𝘭𝘦     |
				 ---------------------- 
					    /\
					   /__\
	   _________________________________|______________________________
	   |								  |
 --------------------------      --------------------------     --------------------------
|       Elipse             | 	|      Triangulo           |   |       Rectangulo         |
 --------------------------      --------------------------     --------------------------
|                          | 	|                          |   |                          |
 --------------------------  	 --------------------------     --------------------------
| + darPerimetro(): double |    | + darPerimetro(): double |   | + darPerimetro(): double |                        |
| + darArea(): double      |    | + darArea(): double      |   | + darArea(): double      |  
 --------------------------      --------------------------     --------------------------
            /\                    					  /\
	   /__\       	 					         /__\
	     |								   |
             |								   |
   --------------------------                                    --------------------------
  |       Circulo            | 				        |        Cuadrado          |
   --------------------------                                    -------------------------- 
  |                          | 				        |                          |
   --------------------------  				         --------------------------
  | + darPerimetro(): double |                                  | + darPerimetro(): double |
  | + darArea(): double      |                                  | + darArea(): double      |
   --------------------------                                    --------------------------

Sobreescribimos los métodos darÁrea y darPerímetro en las subclases círculo y cuadrado 
para implementarlos ajustadamente. 

Primero que todo, el polimorfismo es la propiedad que tienen todos los objetos en una 
relación de herencia de poderse instanciar como objetos de su misma clase o de una de sus 
superclases, esto es una instancia de elipse, por ejemplo, es también una instancia de figura. 

Una instancia de la clase círculo es una instancia de elipse y una instancia de figura.

Ahora, supongamos que en nuestro lenguaje orientado a objetos declaramos un objeto de tipo 
figura del que no podemos crear instancias e invocamos su método darÁrea. 

¿Cómo resuelve esto el compilador en nuestro lenguaje? Bueno, no lo resuelve sino hasta la 
ejecución dinámicamente. 

Y basado en la instancia que creamos allí, él llamará al método darÁrea de la clase que 
creó el objeto. 

Esto es lo que llamamos late binding. 

Y veamos una ilustración. 

Si se instancia el objeto figura como un elipse cuando se llame al método darÁrea 
dinámicamente, el programa va a llamar al método darÁrea que pertenece al elipse, no al 
de figura, y dará el resultado correcto. 

Todo esto gracias al polimorfismo que nos permiten los lenguajes orientados a objetos.